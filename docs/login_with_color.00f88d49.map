{"version":3,"sources":["node_modules/typed.js/lib/typed.js","index.js"],"names":["keys","KeyA","KeyS","KeyD","KeyF","KeyJ","KeyK","KeyL","Semicolon","colors","PASSWORD","target","userColor","document","addEventListener","e","i","code","undefined","changeBgColor","checkTarget","moveTarget","clean","changeBtnColor","checkCorrectPassword","login","clickedColor","getElementsByClassName","style","backgroundColor","getElementById","sort","Math","random","map","color","initPassword","classList","add","targetColor","currentTarget","push","innerHTML","remove","length","split","t","root","printHello","Typed","strings","typeSpeed","setTimeout","printCodename","printColorBox"],"mappings":"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","file":"login_with_color.00f88d49.map","sourceRoot":"..","sourcesContent":["/*!\n * \n *   typed.js - A JavaScript Typing Animation Library\n *   Author: Matt Boldt <me@mattboldt.com>\n *   Version: v2.0.11\n *   Url: https://github.com/mattboldt/typed.js\n *   License(s): MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Typed\"] = factory();\n\telse\n\t\troot[\"Typed\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _initializerJs = __webpack_require__(1);\n\t\n\tvar _htmlParserJs = __webpack_require__(3);\n\t\n\t/**\n\t * Welcome to Typed.js!\n\t * @param {string} elementId HTML element ID _OR_ HTML element\n\t * @param {object} options options object\n\t * @returns {object} a new Typed object\n\t */\n\t\n\tvar Typed = (function () {\n\t  function Typed(elementId, options) {\n\t    _classCallCheck(this, Typed);\n\t\n\t    // Initialize it up\n\t    _initializerJs.initializer.load(this, options, elementId);\n\t    // All systems go!\n\t    this.begin();\n\t  }\n\t\n\t  /**\n\t   * Toggle start() and stop() of the Typed instance\n\t   * @public\n\t   */\n\t\n\t  _createClass(Typed, [{\n\t    key: 'toggle',\n\t    value: function toggle() {\n\t      this.pause.status ? this.start() : this.stop();\n\t    }\n\t\n\t    /**\n\t     * Stop typing / backspacing and enable cursor blinking\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      if (this.typingComplete) return;\n\t      if (this.pause.status) return;\n\t      this.toggleBlinking(true);\n\t      this.pause.status = true;\n\t      this.options.onStop(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Start typing / backspacing after being stopped\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      if (this.typingComplete) return;\n\t      if (!this.pause.status) return;\n\t      this.pause.status = false;\n\t      if (this.pause.typewrite) {\n\t        this.typewrite(this.pause.curString, this.pause.curStrPos);\n\t      } else {\n\t        this.backspace(this.pause.curString, this.pause.curStrPos);\n\t      }\n\t      this.options.onStart(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Destroy this instance of Typed\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.reset(false);\n\t      this.options.onDestroy(this);\n\t    }\n\t\n\t    /**\n\t     * Reset Typed and optionally restarts\n\t     * @param {boolean} restart\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t      clearInterval(this.timeout);\n\t      this.replaceText('');\n\t      if (this.cursor && this.cursor.parentNode) {\n\t        this.cursor.parentNode.removeChild(this.cursor);\n\t        this.cursor = null;\n\t      }\n\t      this.strPos = 0;\n\t      this.arrayPos = 0;\n\t      this.curLoop = 0;\n\t      if (restart) {\n\t        this.insertCursor();\n\t        this.options.onReset(this);\n\t        this.begin();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Begins the typing animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'begin',\n\t    value: function begin() {\n\t      var _this = this;\n\t\n\t      this.options.onBegin(this);\n\t      this.typingComplete = false;\n\t      this.shuffleStringsIfNeeded(this);\n\t      this.insertCursor();\n\t      if (this.bindInputFocusEvents) this.bindFocusEvents();\n\t      this.timeout = setTimeout(function () {\n\t        // Check if there is some text in the element, if yes start by backspacing the default message\n\t        if (!_this.currentElContent || _this.currentElContent.length === 0) {\n\t          _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n\t        } else {\n\t          // Start typing\n\t          _this.backspace(_this.currentElContent, _this.currentElContent.length);\n\t        }\n\t      }, this.startDelay);\n\t    }\n\t\n\t    /**\n\t     * Called for each character typed\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'typewrite',\n\t    value: function typewrite(curString, curStrPos) {\n\t      var _this2 = this;\n\t\n\t      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n\t        this.el.classList.remove(this.fadeOutClass);\n\t        if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n\t      }\n\t\n\t      var humanize = this.humanizer(this.typeSpeed);\n\t      var numChars = 1;\n\t\n\t      if (this.pause.status === true) {\n\t        this.setPauseStatus(curString, curStrPos, true);\n\t        return;\n\t      }\n\t\n\t      // contain typing function in a timeout humanize'd delay\n\t      this.timeout = setTimeout(function () {\n\t        // skip over any HTML chars\n\t        curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n\t\n\t        var pauseTime = 0;\n\t        var substr = curString.substr(curStrPos);\n\t        // check for an escape character before a pause value\n\t        // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t        // single ^ are removed from string\n\t        if (substr.charAt(0) === '^') {\n\t          if (/^\\^\\d+/.test(substr)) {\n\t            var skip = 1; // skip at least 1\n\t            substr = /\\d+/.exec(substr)[0];\n\t            skip += substr.length;\n\t            pauseTime = parseInt(substr);\n\t            _this2.temporaryPause = true;\n\t            _this2.options.onTypingPaused(_this2.arrayPos, _this2);\n\t            // strip out the escape character and pause value so they're not printed\n\t            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t            _this2.toggleBlinking(true);\n\t          }\n\t        }\n\t\n\t        // check for skip characters formatted as\n\t        // \"this is a `string to print NOW` ...\"\n\t        if (substr.charAt(0) === '`') {\n\t          while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n\t            numChars++;\n\t            if (curStrPos + numChars > curString.length) break;\n\t          }\n\t          // strip out the escape characters and append all the string in between\n\t          var stringBeforeSkip = curString.substring(0, curStrPos);\n\t          var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n\t          var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n\t          curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n\t          numChars--;\n\t        }\n\t\n\t        // timeout for any pause after a character\n\t        _this2.timeout = setTimeout(function () {\n\t          // Accounts for blinking while paused\n\t          _this2.toggleBlinking(false);\n\t\n\t          // We're done with this sentence!\n\t          if (curStrPos >= curString.length) {\n\t            _this2.doneTyping(curString, curStrPos);\n\t          } else {\n\t            _this2.keepTyping(curString, curStrPos, numChars);\n\t          }\n\t          // end of character pause\n\t          if (_this2.temporaryPause) {\n\t            _this2.temporaryPause = false;\n\t            _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n\t          }\n\t        }, pauseTime);\n\t\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Continue to the next string & begin typing\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'keepTyping',\n\t    value: function keepTyping(curString, curStrPos, numChars) {\n\t      // call before functions if applicable\n\t      if (curStrPos === 0) {\n\t        this.toggleBlinking(false);\n\t        this.options.preStringTyped(this.arrayPos, this);\n\t      }\n\t      // start typing each new char into existing string\n\t      // curString: arg, this.el.html: original text inside element\n\t      curStrPos += numChars;\n\t      var nextString = curString.substr(0, curStrPos);\n\t      this.replaceText(nextString);\n\t      // loop the function\n\t      this.typewrite(curString, curStrPos);\n\t    }\n\t\n\t    /**\n\t     * We're done typing the current string\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'doneTyping',\n\t    value: function doneTyping(curString, curStrPos) {\n\t      var _this3 = this;\n\t\n\t      // fires callback function\n\t      this.options.onStringTyped(this.arrayPos, this);\n\t      this.toggleBlinking(true);\n\t      // is this the final string\n\t      if (this.arrayPos === this.strings.length - 1) {\n\t        // callback that occurs on the last typed string\n\t        this.complete();\n\t        // quit if we wont loop back\n\t        if (this.loop === false || this.curLoop === this.loopCount) {\n\t          return;\n\t        }\n\t      }\n\t      this.timeout = setTimeout(function () {\n\t        _this3.backspace(curString, curStrPos);\n\t      }, this.backDelay);\n\t    }\n\t\n\t    /**\n\t     * Backspaces 1 character at a time\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backspace',\n\t    value: function backspace(curString, curStrPos) {\n\t      var _this4 = this;\n\t\n\t      if (this.pause.status === true) {\n\t        this.setPauseStatus(curString, curStrPos, true);\n\t        return;\n\t      }\n\t      if (this.fadeOut) return this.initFadeOut();\n\t\n\t      this.toggleBlinking(false);\n\t      var humanize = this.humanizer(this.backSpeed);\n\t\n\t      this.timeout = setTimeout(function () {\n\t        curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);\n\t        // replace text with base text + typed characters\n\t        var curStringAtPosition = curString.substr(0, curStrPos);\n\t        _this4.replaceText(curStringAtPosition);\n\t\n\t        // if smartBack is enabled\n\t        if (_this4.smartBackspace) {\n\t          // the remaining part of the current string is equal of the same part of the new string\n\t          var nextString = _this4.strings[_this4.arrayPos + 1];\n\t          if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n\t            _this4.stopNum = curStrPos;\n\t          } else {\n\t            _this4.stopNum = 0;\n\t          }\n\t        }\n\t\n\t        // if the number (id of character in current string) is\n\t        // less than the stop number, keep going\n\t        if (curStrPos > _this4.stopNum) {\n\t          // subtract characters one by one\n\t          curStrPos--;\n\t          // loop the function\n\t          _this4.backspace(curString, curStrPos);\n\t        } else if (curStrPos <= _this4.stopNum) {\n\t          // if the stop number has been reached, increase\n\t          // array position to next string\n\t          _this4.arrayPos++;\n\t          // When looping, begin at the beginning after backspace complete\n\t          if (_this4.arrayPos === _this4.strings.length) {\n\t            _this4.arrayPos = 0;\n\t            _this4.options.onLastStringBackspaced();\n\t            _this4.shuffleStringsIfNeeded();\n\t            _this4.begin();\n\t          } else {\n\t            _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n\t          }\n\t        }\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Full animation is complete\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'complete',\n\t    value: function complete() {\n\t      this.options.onComplete(this);\n\t      if (this.loop) {\n\t        this.curLoop++;\n\t      } else {\n\t        this.typingComplete = true;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Has the typing been stopped\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @param {boolean} isTyping\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'setPauseStatus',\n\t    value: function setPauseStatus(curString, curStrPos, isTyping) {\n\t      this.pause.typewrite = isTyping;\n\t      this.pause.curString = curString;\n\t      this.pause.curStrPos = curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Toggle the blinking cursor\n\t     * @param {boolean} isBlinking\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'toggleBlinking',\n\t    value: function toggleBlinking(isBlinking) {\n\t      if (!this.cursor) return;\n\t      // if in paused state, don't toggle blinking a 2nd time\n\t      if (this.pause.status) return;\n\t      if (this.cursorBlinking === isBlinking) return;\n\t      this.cursorBlinking = isBlinking;\n\t      if (isBlinking) {\n\t        this.cursor.classList.add('typed-cursor--blink');\n\t      } else {\n\t        this.cursor.classList.remove('typed-cursor--blink');\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Speed in MS to type\n\t     * @param {number} speed\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'humanizer',\n\t    value: function humanizer(speed) {\n\t      return Math.round(Math.random() * speed / 2) + speed;\n\t    }\n\t\n\t    /**\n\t     * Shuffle the sequence of the strings array\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'shuffleStringsIfNeeded',\n\t    value: function shuffleStringsIfNeeded() {\n\t      if (!this.shuffle) return;\n\t      this.sequence = this.sequence.sort(function () {\n\t        return Math.random() - 0.5;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Adds a CSS class to fade out current string\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'initFadeOut',\n\t    value: function initFadeOut() {\n\t      var _this5 = this;\n\t\n\t      this.el.className += ' ' + this.fadeOutClass;\n\t      if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n\t      return setTimeout(function () {\n\t        _this5.arrayPos++;\n\t        _this5.replaceText('');\n\t\n\t        // Resets current string if end of loop reached\n\t        if (_this5.strings.length > _this5.arrayPos) {\n\t          _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n\t        } else {\n\t          _this5.typewrite(_this5.strings[0], 0);\n\t          _this5.arrayPos = 0;\n\t        }\n\t      }, this.fadeOutDelay);\n\t    }\n\t\n\t    /**\n\t     * Replaces current text in the HTML element\n\t     * depending on element type\n\t     * @param {string} str\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'replaceText',\n\t    value: function replaceText(str) {\n\t      if (this.attr) {\n\t        this.el.setAttribute(this.attr, str);\n\t      } else {\n\t        if (this.isInput) {\n\t          this.el.value = str;\n\t        } else if (this.contentType === 'html') {\n\t          this.el.innerHTML = str;\n\t        } else {\n\t          this.el.textContent = str;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * If using input elements, bind focus in order to\n\t     * start and stop the animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'bindFocusEvents',\n\t    value: function bindFocusEvents() {\n\t      var _this6 = this;\n\t\n\t      if (!this.isInput) return;\n\t      this.el.addEventListener('focus', function (e) {\n\t        _this6.stop();\n\t      });\n\t      this.el.addEventListener('blur', function (e) {\n\t        if (_this6.el.value && _this6.el.value.length !== 0) {\n\t          return;\n\t        }\n\t        _this6.start();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * On init, insert the cursor element\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'insertCursor',\n\t    value: function insertCursor() {\n\t      if (!this.showCursor) return;\n\t      if (this.cursor) return;\n\t      this.cursor = document.createElement('span');\n\t      this.cursor.className = 'typed-cursor';\n\t      this.cursor.innerHTML = this.cursorChar;\n\t      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n\t    }\n\t  }]);\n\t\n\t  return Typed;\n\t})();\n\t\n\texports['default'] = Typed;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _defaultsJs = __webpack_require__(2);\n\t\n\tvar _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n\t\n\t/**\n\t * Initialize the Typed object\n\t */\n\t\n\tvar Initializer = (function () {\n\t  function Initializer() {\n\t    _classCallCheck(this, Initializer);\n\t  }\n\t\n\t  _createClass(Initializer, [{\n\t    key: 'load',\n\t\n\t    /**\n\t     * Load up defaults & options on the Typed instance\n\t     * @param {Typed} self instance of Typed\n\t     * @param {object} options options object\n\t     * @param {string} elementId HTML element ID _OR_ instance of HTML element\n\t     * @private\n\t     */\n\t\n\t    value: function load(self, options, elementId) {\n\t      // chosen element to manipulate text\n\t      if (typeof elementId === 'string') {\n\t        self.el = document.querySelector(elementId);\n\t      } else {\n\t        self.el = elementId;\n\t      }\n\t\n\t      self.options = _extends({}, _defaultsJs2['default'], options);\n\t\n\t      // attribute to type into\n\t      self.isInput = self.el.tagName.toLowerCase() === 'input';\n\t      self.attr = self.options.attr;\n\t      self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\t\n\t      // show cursor\n\t      self.showCursor = self.isInput ? false : self.options.showCursor;\n\t\n\t      // custom cursor\n\t      self.cursorChar = self.options.cursorChar;\n\t\n\t      // Is the cursor blinking\n\t      self.cursorBlinking = true;\n\t\n\t      // text content of element\n\t      self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\n\t\n\t      // html or plain text\n\t      self.contentType = self.options.contentType;\n\t\n\t      // typing speed\n\t      self.typeSpeed = self.options.typeSpeed;\n\t\n\t      // add a delay before typing starts\n\t      self.startDelay = self.options.startDelay;\n\t\n\t      // backspacing speed\n\t      self.backSpeed = self.options.backSpeed;\n\t\n\t      // only backspace what doesn't match the previous string\n\t      self.smartBackspace = self.options.smartBackspace;\n\t\n\t      // amount of time to wait before backspacing\n\t      self.backDelay = self.options.backDelay;\n\t\n\t      // Fade out instead of backspace\n\t      self.fadeOut = self.options.fadeOut;\n\t      self.fadeOutClass = self.options.fadeOutClass;\n\t      self.fadeOutDelay = self.options.fadeOutDelay;\n\t\n\t      // variable to check whether typing is currently paused\n\t      self.isPaused = false;\n\t\n\t      // input strings of text\n\t      self.strings = self.options.strings.map(function (s) {\n\t        return s.trim();\n\t      });\n\t\n\t      // div containing strings\n\t      if (typeof self.options.stringsElement === 'string') {\n\t        self.stringsElement = document.querySelector(self.options.stringsElement);\n\t      } else {\n\t        self.stringsElement = self.options.stringsElement;\n\t      }\n\t\n\t      if (self.stringsElement) {\n\t        self.strings = [];\n\t        self.stringsElement.style.display = 'none';\n\t        var strings = Array.prototype.slice.apply(self.stringsElement.children);\n\t        var stringsLength = strings.length;\n\t\n\t        if (stringsLength) {\n\t          for (var i = 0; i < stringsLength; i += 1) {\n\t            var stringEl = strings[i];\n\t            self.strings.push(stringEl.innerHTML.trim());\n\t          }\n\t        }\n\t      }\n\t\n\t      // character number position of current string\n\t      self.strPos = 0;\n\t\n\t      // current array position\n\t      self.arrayPos = 0;\n\t\n\t      // index of string to stop backspacing on\n\t      self.stopNum = 0;\n\t\n\t      // Looping logic\n\t      self.loop = self.options.loop;\n\t      self.loopCount = self.options.loopCount;\n\t      self.curLoop = 0;\n\t\n\t      // shuffle the strings\n\t      self.shuffle = self.options.shuffle;\n\t      // the order of strings\n\t      self.sequence = [];\n\t\n\t      self.pause = {\n\t        status: false,\n\t        typewrite: true,\n\t        curString: '',\n\t        curStrPos: 0\n\t      };\n\t\n\t      // When the typing is complete (when not looped)\n\t      self.typingComplete = false;\n\t\n\t      // Set the order in which the strings are typed\n\t      for (var i in self.strings) {\n\t        self.sequence[i] = i;\n\t      }\n\t\n\t      // If there is some text in the element\n\t      self.currentElContent = this.getCurrentElContent(self);\n\t\n\t      self.autoInsertCss = self.options.autoInsertCss;\n\t\n\t      this.appendAnimationCss(self);\n\t    }\n\t  }, {\n\t    key: 'getCurrentElContent',\n\t    value: function getCurrentElContent(self) {\n\t      var elContent = '';\n\t      if (self.attr) {\n\t        elContent = self.el.getAttribute(self.attr);\n\t      } else if (self.isInput) {\n\t        elContent = self.el.value;\n\t      } else if (self.contentType === 'html') {\n\t        elContent = self.el.innerHTML;\n\t      } else {\n\t        elContent = self.el.textContent;\n\t      }\n\t      return elContent;\n\t    }\n\t  }, {\n\t    key: 'appendAnimationCss',\n\t    value: function appendAnimationCss(self) {\n\t      var cssDataName = 'data-typed-js-css';\n\t      if (!self.autoInsertCss) {\n\t        return;\n\t      }\n\t      if (!self.showCursor && !self.fadeOut) {\n\t        return;\n\t      }\n\t      if (document.querySelector('[' + cssDataName + ']')) {\n\t        return;\n\t      }\n\t\n\t      var css = document.createElement('style');\n\t      css.type = 'text/css';\n\t      css.setAttribute(cssDataName, true);\n\t\n\t      var innerCss = '';\n\t      if (self.showCursor) {\n\t        innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n\t      }\n\t      if (self.fadeOut) {\n\t        innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      ';\n\t      }\n\t      if (css.length === 0) {\n\t        return;\n\t      }\n\t      css.innerHTML = innerCss;\n\t      document.body.appendChild(css);\n\t    }\n\t  }]);\n\t\n\t  return Initializer;\n\t})();\n\t\n\texports['default'] = Initializer;\n\tvar initializer = new Initializer();\n\texports.initializer = initializer;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Defaults & options\n\t * @returns {object} Typed defaults & options\n\t * @public\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar defaults = {\n\t  /**\n\t   * @property {array} strings strings to be typed\n\t   * @property {string} stringsElement ID of element containing string children\n\t   */\n\t  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n\t  stringsElement: null,\n\t\n\t  /**\n\t   * @property {number} typeSpeed type speed in milliseconds\n\t   */\n\t  typeSpeed: 0,\n\t\n\t  /**\n\t   * @property {number} startDelay time before typing starts in milliseconds\n\t   */\n\t  startDelay: 0,\n\t\n\t  /**\n\t   * @property {number} backSpeed backspacing speed in milliseconds\n\t   */\n\t  backSpeed: 0,\n\t\n\t  /**\n\t   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n\t   */\n\t  smartBackspace: true,\n\t\n\t  /**\n\t   * @property {boolean} shuffle shuffle the strings\n\t   */\n\t  shuffle: false,\n\t\n\t  /**\n\t   * @property {number} backDelay time before backspacing in milliseconds\n\t   */\n\t  backDelay: 700,\n\t\n\t  /**\n\t   * @property {boolean} fadeOut Fade out instead of backspace\n\t   * @property {string} fadeOutClass css class for fade animation\n\t   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n\t   */\n\t  fadeOut: false,\n\t  fadeOutClass: 'typed-fade-out',\n\t  fadeOutDelay: 500,\n\t\n\t  /**\n\t   * @property {boolean} loop loop strings\n\t   * @property {number} loopCount amount of loops\n\t   */\n\t  loop: false,\n\t  loopCount: Infinity,\n\t\n\t  /**\n\t   * @property {boolean} showCursor show cursor\n\t   * @property {string} cursorChar character for cursor\n\t   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n\t   */\n\t  showCursor: true,\n\t  cursorChar: '|',\n\t  autoInsertCss: true,\n\t\n\t  /**\n\t   * @property {string} attr attribute for typing\n\t   * Ex: input placeholder, value, or just HTML text\n\t   */\n\t  attr: null,\n\t\n\t  /**\n\t   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n\t   */\n\t  bindInputFocusEvents: false,\n\t\n\t  /**\n\t   * @property {string} contentType 'html' or 'null' for plaintext\n\t   */\n\t  contentType: 'html',\n\t\n\t  /**\n\t   * Before it begins typing\n\t   * @param {Typed} self\n\t   */\n\t  onBegin: function onBegin(self) {},\n\t\n\t  /**\n\t   * All typing is complete\n\t   * @param {Typed} self\n\t   */\n\t  onComplete: function onComplete(self) {},\n\t\n\t  /**\n\t   * Before each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  preStringTyped: function preStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * After each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStringTyped: function onStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * During looping, after last string is typed\n\t   * @param {Typed} self\n\t   */\n\t  onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\t\n\t  /**\n\t   * Typing has been stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\t\n\t  /**\n\t   * Typing has been started after being stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\t\n\t  /**\n\t   * After reset\n\t   * @param {Typed} self\n\t   */\n\t  onReset: function onReset(self) {},\n\t\n\t  /**\n\t   * After stop\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStop: function onStop(arrayPos, self) {},\n\t\n\t  /**\n\t   * After start\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStart: function onStart(arrayPos, self) {},\n\t\n\t  /**\n\t   * After destroy\n\t   * @param {Typed} self\n\t   */\n\t  onDestroy: function onDestroy(self) {}\n\t};\n\t\n\texports['default'] = defaults;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * TODO: These methods can probably be combined somehow\n\t * Parse HTML tags & HTML Characters\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar HTMLParser = (function () {\n\t  function HTMLParser() {\n\t    _classCallCheck(this, HTMLParser);\n\t  }\n\t\n\t  _createClass(HTMLParser, [{\n\t    key: 'typeHtmlChars',\n\t\n\t    /**\n\t     * Type HTML tags & HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t\n\t    value: function typeHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '<' || curChar === '&') {\n\t        var endTag = '';\n\t        if (curChar === '<') {\n\t          endTag = '>';\n\t        } else {\n\t          endTag = ';';\n\t        }\n\t        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t          curStrPos++;\n\t          if (curStrPos + 1 > curString.length) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos++;\n\t      }\n\t      return curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Backspace HTML tags and HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backSpaceHtmlChars',\n\t    value: function backSpaceHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '>' || curChar === ';') {\n\t        var endTag = '';\n\t        if (curChar === '>') {\n\t          endTag = '<';\n\t        } else {\n\t          endTag = '&';\n\t        }\n\t        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n\t          curStrPos--;\n\t          if (curStrPos < 0) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos--;\n\t      }\n\t      return curStrPos;\n\t    }\n\t  }]);\n\t\n\t  return HTMLParser;\n\t})();\n\t\n\texports['default'] = HTMLParser;\n\tvar htmlParser = new HTMLParser();\n\texports.htmlParser = htmlParser;\n\n/***/ })\n/******/ ])\n});\n;","import Typed from \"typed.js\";\n\nconst keys = {\n    KeyA: 0,\n    KeyS: 1,\n    KeyD: 2,\n    KeyF: 3,\n    KeyJ: 4,\n    KeyK: 5,\n    KeyL: 6,\n    Semicolon: 7\n};\n\nconst colors = [\n    \"#845EC2\",\n    \"#C34A36\",\n    \"#FF6F91\",\n    \"#008F7A\",\n    \"#0081CF\",\n    \"#FF9671\",\n    \"#FFC75F\",\n    \"#F9F871\"\n];\n\nconst PASSWORD = \"PASSWORD\";\n\nlet target = 0;\nlet userColor = [];\n\ndocument.addEventListener(\"keyup\", e => {\n    const i = keys[e.code];\n    if (i !== undefined) {\n        changeBgColor(i);\n        if (checkTarget(i)) {\n            moveTarget();\n        } else {\n            clean();\n        }\n        changeBtnColor();\n    } else {\n        clean();\n    }\n    if (checkCorrectPassword()) {\n        login();\n    }\n});\n\nconst clickedColor = i => document.getElementsByClassName(\"color\")[i].style.backgroundColor;\n\nconst changeBgColor = i => {\n    document.getElementById(\"root\").style.backgroundColor = clickedColor(i);\n};\n\nconst changeBtnColor = () => {\n    colors\n        .sort(() => {\n            return 0.5 - Math.random();\n        })\n        .map((color, i) => {\n            document.getElementsByClassName(\"color\")[i].style.backgroundColor = color;\n        });\n};\n\nconst initPassword = () => {\n    colors\n        .sort(() => {\n            return 0.5 - Math.random();\n        })\n        .map((color, i) => {\n            document.getElementsByClassName(\"password\")[i].style.color = color;\n        });\n    document.getElementsByClassName(\"password\")[target].classList.add(\"target\");\n};\n\nconst checkTarget = i => {\n    const targetColor = document.getElementsByClassName(\"target\")[0].style.color;\n    if (targetColor === clickedColor(i)) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst moveTarget = () => {\n    const currentTarget = document.getElementsByClassName(\"target\")[0];\n    userColor.push(currentTarget.style.color);\n    currentTarget.innerHTML = \" \";\n    currentTarget.classList.remove(\"target\");\n    target = target + 1;\n    if (target < PASSWORD.length) {\n        document.getElementsByClassName(\"password\")[target].classList.add(\"target\");\n    }\n};\n\nconst clean = () => {\n    PASSWORD.split(\"\").map((t, i) => {\n        document.getElementsByClassName(\"password\")[i].innerHTML = `<p>${t}</p>`;\n        document.getElementsByClassName(\"password\")[i].classList.remove(\"target\");\n    });\n    target = 0;\n    document.getElementsByClassName(\"password\")[target].classList.add(\"target\");\n};\n\nconst checkCorrectPassword = () => {\n    return target === PASSWORD.length;\n};\n\nconst login = () => {\n    const root = document.getElementById(\"root\");\n    root.innerHTML = \"\";\n    root.style.backgroundColor = \"white\";\n    root.innerHTML = \"<div id='loginCompleted'><span id='loginCompletedText'></span></div>\";\n    printHello();\n};\n\nconst printHello = () => {\n    let typed = new Typed(\"#loginCompletedText\", {\n        strings: [\"Congraturation.\", \"Your codename is..\"],\n        typeSpeed: 40\n    });\n    setTimeout(printCodename, 5000);\n};\n\nconst printCodename = () => {\n    document.getElementById(\"loginCompleted\").innerHTML = \"\";\n    userColor.map(color => {\n        document.getElementById(\"loginCompleted\").innerHTML += printColorBox(color);\n    });\n};\n\nconst printColorBox = color => {\n    return `<div class=\"colorBox\" style=\"background-color:${color}\"></div>`;\n};\n\ninitPassword();\nchangeBtnColor();\n"]}